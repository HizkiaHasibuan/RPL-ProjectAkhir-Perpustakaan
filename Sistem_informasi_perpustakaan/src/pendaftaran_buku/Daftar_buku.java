/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pendaftaran_buku;

import Tag.Tag_list;
import java.awt.Cursor;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import pencarian_buku.Searching;
import sistem_informasi_perpustakaan.connection.db_connection;

/**
 *
 * @author Daniel
 */
//Class untuk input/update data buku
public class Daftar_buku extends javax.swing.JFrame {
    public boolean isTagListOpen = false;//variabel yang membantu agar tag list tidak dibuka lebih dari 1 sebelum menutupnya
    private boolean update = false;//Kalau digunakan untuk update data buku akan benilai true
    private int id_buku = 0;
    public int idTag1 = 0;
    public int idTag2 = 0;
    public int idTag3 = 0;
    /**
     * Creates new form Daftar_buku
     */
    public Daftar_buku() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_addTag1 = new javax.swing.JLabel();
        textbox_judul = new javax.swing.JTextField();
        textbox_penulis = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textbox_penerbit = new javax.swing.JTextField();
        Spinner_jumlah = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        btn_submit = new javax.swing.JLabel();
        btn_back = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textbox_tag1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textbox_tag2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        textbox_tag3 = new javax.swing.JTextField();
        btn_addTag2 = new javax.swing.JLabel();
        btn_addTag3 = new javax.swing.JLabel();
        validasi_tag = new javax.swing.JLabel();
        validasi_judul = new javax.swing.JLabel();
        validasi_penulis = new javax.swing.JLabel();
        spinner_thn_terbit = new javax.swing.JSpinner();
        validasi_thn_terbit = new javax.swing.JLabel();
        validasi_no_rak = new javax.swing.JLabel();
        validasi_penerbit = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Spinner_no_rak = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        textbox_kota_terbit = new javax.swing.JTextField();
        validasi_kota_terbit = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        textbox_isbn = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        textbox_volume = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        textbox_edisi = new javax.swing.JTextField();
        validasi_isbn = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        jLabel13.setText("jLabel13");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(148, 61, 21));
        jScrollPane1.setForeground(new java.awt.Color(148, 61, 21));

        jPanel1.setBackground(new java.awt.Color(148,61,21));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setDoubleBuffered(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(253, 750));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Judul Buku");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel2.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Penulis");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 79, -1, -1));

        btn_addTag1.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        btn_addTag1.setForeground(new java.awt.Color(255, 255, 255));
        btn_addTag1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btn_addTag1.setText("Add Tag");
        btn_addTag1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_addTag1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_addTag1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_addTag1MouseExited(evt);
            }
        });
        jPanel1.add(btn_addTag1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 570, 60, -1));

        textbox_judul.setBackground(new java.awt.Color(148, 61, 21));
        textbox_judul.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_judul.setForeground(new java.awt.Color(255, 255, 255));
        textbox_judul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textbox_judulActionPerformed(evt);
            }
        });
        jPanel1.add(textbox_judul, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 33, 241, -1));

        textbox_penulis.setBackground(new java.awt.Color(148, 61, 21));
        textbox_penulis.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_penulis.setForeground(new java.awt.Color(255, 255, 255));
        textbox_penulis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textbox_penulisActionPerformed(evt);
            }
        });
        jPanel1.add(textbox_penulis, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 99, 241, -1));

        jLabel3.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Penerbit");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 141, -1, -1));

        textbox_penerbit.setBackground(new java.awt.Color(148, 61, 21));
        textbox_penerbit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_penerbit.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(textbox_penerbit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 161, 241, -1));

        Spinner_jumlah.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        ((javax.swing.JSpinner.DefaultEditor)Spinner_jumlah.getEditor()).getTextField().setEditable(false);
        jPanel1.add(Spinner_jumlah, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 470, -1, -1));

        jLabel6.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("No.Rak");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 50, -1));

        btn_submit.setFont(new java.awt.Font("Harrington", 1, 14)); // NOI18N
        btn_submit.setForeground(new java.awt.Color(255, 255, 255));
        btn_submit.setText("Submit");
        btn_submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_submitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_submitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_submitMouseExited(evt);
            }
        });
        btn_submit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_submitKeyPressed(evt);
            }
        });
        jPanel1.add(btn_submit, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 720, 50, -1));

        btn_back.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        btn_back.setForeground(new java.awt.Color(255, 255, 255));
        btn_back.setText("Back");
        btn_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_backMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_backMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_backMouseExited(evt);
            }
        });
        jPanel1.add(btn_back, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 720, 30, 20));

        jLabel7.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Tag Buku");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, -1, -1));

        jLabel8.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Tag 1");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, -1, -1));

        textbox_tag1.setBackground(new java.awt.Color(148, 61, 21));
        textbox_tag1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_tag1.setForeground(new java.awt.Color(255, 255, 255));
        textbox_tag1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textbox_tag1.setEnabled(false);
        textbox_tag1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textbox_tag1ActionPerformed(evt);
            }
        });
        jPanel1.add(textbox_tag1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, 243, -1));

        jLabel9.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Tag 2");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 620, -1, -1));

        textbox_tag2.setBackground(new java.awt.Color(148, 61, 21));
        textbox_tag2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_tag2.setForeground(new java.awt.Color(255, 255, 255));
        textbox_tag2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textbox_tag2.setEnabled(false);
        textbox_tag2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textbox_tag2ActionPerformed(evt);
            }
        });
        jPanel1.add(textbox_tag2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 640, 243, -1));

        jLabel10.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Tag 3");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 670, -1, -1));

        textbox_tag3.setBackground(new java.awt.Color(148, 61, 21));
        textbox_tag3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_tag3.setForeground(new java.awt.Color(255, 255, 255));
        textbox_tag3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textbox_tag3.setEnabled(false);
        jPanel1.add(textbox_tag3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 690, 243, -1));

        btn_addTag2.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        btn_addTag2.setForeground(new java.awt.Color(255, 255, 255));
        btn_addTag2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btn_addTag2.setText("Add Tag");
        btn_addTag2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_addTag2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_addTag2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_addTag2MouseExited(evt);
            }
        });
        jPanel1.add(btn_addTag2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 620, 60, -1));

        btn_addTag3.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        btn_addTag3.setForeground(new java.awt.Color(255, 255, 255));
        btn_addTag3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btn_addTag3.setText("Add Tag");
        btn_addTag3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_addTag3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_addTag3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_addTag3MouseExited(evt);
            }
        });
        jPanel1.add(btn_addTag3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 670, 60, -1));

        validasi_tag.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_tag.setForeground(new java.awt.Color(255, 255, 0));
        validasi_tag.setText("Warning!");
        validasi_tag.setVisible(false);
        jPanel1.add(validasi_tag, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 720, -1, -1));

        validasi_judul.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_judul.setForeground(new java.awt.Color(255, 255, 0));
        validasi_judul.setText("Validasi Judul");
        validasi_judul.setVisible(false);
        jPanel1.add(validasi_judul, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 59, -1, -1));

        validasi_penulis.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_penulis.setForeground(new java.awt.Color(255, 255, 0));
        validasi_penulis.setText("Validasi Penulis");
        validasi_penulis.setVisible(false);
        jPanel1.add(validasi_penulis, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 125, -1, -1));

        spinner_thn_terbit.setModel(new javax.swing.SpinnerNumberModel(2021, 0, null, 1));
        spinner_thn_terbit.setEditor(new javax.swing.JSpinner.NumberEditor(spinner_thn_terbit,"0"));
        ((javax.swing.JSpinner.DefaultEditor)spinner_thn_terbit.getEditor()).getTextField().setEditable(false);
        spinner_thn_terbit.setRequestFocusEnabled(false);
        spinner_thn_terbit.setValue(2021);
        jPanel1.add(spinner_thn_terbit, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 207, 162, -1));

        validasi_thn_terbit.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_thn_terbit.setForeground(new java.awt.Color(255, 255, 0));
        validasi_thn_terbit.setText("Validasi Tahun Terbit");
        validasi_thn_terbit.setVisible(false);
        jPanel1.add(validasi_thn_terbit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, -1, -1));

        validasi_no_rak.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_no_rak.setForeground(new java.awt.Color(255, 255, 0));
        validasi_no_rak.setText("Validasi No.Rak");
        validasi_no_rak.setVisible(false);
        jPanel1.add(validasi_no_rak, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, -1, -1));

        validasi_penerbit.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_penerbit.setForeground(new java.awt.Color(255, 255, 0));
        validasi_penerbit.setText("Validasi Penerbit");
        validasi_penerbit.setVisible(false);
        jPanel1.add(validasi_penerbit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 187, -1, -1));

        jLabel4.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Tahun Terbit");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        jLabel5.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Jumlah");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 470, -1, -1));

        Spinner_no_rak.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        ((javax.swing.JSpinner.DefaultEditor)Spinner_no_rak.getEditor()).getTextField().setEditable(false);
        jPanel1.add(Spinner_no_rak, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, 240, -1));

        jLabel14.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Kota Terbit");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        textbox_kota_terbit.setBackground(new java.awt.Color(148, 61, 21));
        textbox_kota_terbit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_kota_terbit.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(textbox_kota_terbit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 240, -1));

        validasi_kota_terbit.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_kota_terbit.setForeground(new java.awt.Color(255, 255, 0));
        validasi_kota_terbit.setText("Validasi Kota Terbit");
        validasi_kota_terbit.setVisible(false);
        jPanel1.add(validasi_kota_terbit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 110, 20));

        jLabel15.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("ISBN");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 60, -1));

        textbox_isbn.setBackground(new java.awt.Color(148, 61, 21));
        textbox_isbn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_isbn.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(textbox_isbn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 240, -1));

        jLabel16.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Volume");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 50, -1));

        textbox_volume.setBackground(new java.awt.Color(148, 61, 21));
        textbox_volume.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_volume.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(textbox_volume, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 240, -1));

        jLabel17.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Edisi");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 40, -1));

        textbox_edisi.setBackground(new java.awt.Color(148, 61, 21));
        textbox_edisi.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textbox_edisi.setForeground(new java.awt.Color(255, 255, 255));
        textbox_edisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textbox_edisiActionPerformed(evt);
            }
        });
        jPanel1.add(textbox_edisi, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 240, -1));

        validasi_isbn.setFont(new java.awt.Font("Harrington", 1, 12)); // NOI18N
        validasi_isbn.setForeground(new java.awt.Color(255, 255, 0));
        validasi_isbn.setText("Validasi ISBN");
        validasi_isbn.setVisible(false);
        jPanel1.add(validasi_isbn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 90, 20));

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 280, 370));

        jLabel11.setFont(new java.awt.Font("Harrington", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Tambah Buku Baru");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 340, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Background600x650.jpg"))); // NOI18N
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addTag3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag3MouseClicked
        if(!isTagListOpen){
            Tag_list tag = new Tag_list(this,3);
            tag.setVisible(true);
            isTagListOpen = true;
        }
    }//GEN-LAST:event_btn_addTag3MouseClicked

    private void btn_addTag2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag2MouseClicked
        if(!isTagListOpen){
            Tag_list tag = new Tag_list(this,2);
            tag.setVisible(true);
            isTagListOpen = true;
        }
    }//GEN-LAST:event_btn_addTag2MouseClicked

    private void textbox_tag2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textbox_tag2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textbox_tag2ActionPerformed

    private void textbox_tag1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textbox_tag1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textbox_tag1ActionPerformed

    private void btn_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backMouseClicked
        this.dispose();
        if(!update){
            Tipe_buku_option tipe_buku_option = new Tipe_buku_option(0,4);
            tipe_buku_option.setVisible(true);   
        }
        else{
            Searching searching = new Searching(0, true, 1);
            searching.setVisible(true);
        }
    }//GEN-LAST:event_btn_backMouseClicked

    private void btn_submitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_submitKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_submitKeyPressed

    private void btn_submitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_submitMouseClicked
        boolean judulIsValid = titleValidation();
        boolean penulisIsValid = textBoxValidation(textbox_penulis);
        boolean penerbitIsValid = textBoxValidation(textbox_penerbit);
        boolean tagIsValid = tagValidation();
        boolean yearIsValid = yearValidation();
        boolean kotaTerbitIsValid = textBoxValidation(textbox_kota_terbit);
        boolean isbnIsValid = textBoxValidation(textbox_isbn);
        //validasi
        if(!judulIsValid){
            validasi_judul.setVisible(true);
        }
        if(!penulisIsValid){
            validasi_penulis.setText("Penulis tidak boleh kosong");
            validasi_penulis.setVisible(true);
        }
        if(!penerbitIsValid){
            validasi_penerbit.setText("Penerbit tidak boleh kosong");
            validasi_penerbit.setVisible(true);
        }
        if(!yearIsValid){
            validasi_thn_terbit.setText("Tahun terbit tidak bisa melebihi tahun sekarang");
            validasi_thn_terbit.setVisible(true);
        }
        if(!tagIsValid){
            if(idTag1 == 0 && idTag2 == 0 && idTag3 == 0){
                validasi_tag.setText("Tag minimal ada 1");
            }
            else{
                validasi_tag.setText("Tag tidak boleh sama");
            }
            validasi_tag.setVisible(true);
        }
        else{
            validasi_tag.setVisible(false);
        }
        if(!kotaTerbitIsValid){
            validasi_kota_terbit.setText("Kota Terbit tidak boleh kosong");
            validasi_kota_terbit.setVisible(true);
        }
        if(!isbnIsValid){
            validasi_isbn.setText("ISBN tidak boleh kosong");
            validasi_isbn.setVisible(true);
        }
        //Disubmit kalau isian sudah valid semua
        if(judulIsValid == true && penulisIsValid == true && penerbitIsValid == true && tagIsValid == true && yearIsValid == true && kotaTerbitIsValid == true && isbnIsValid == true){
            validasi_judul.setVisible(false);
            validasi_penulis.setVisible(false);
            validasi_penerbit.setVisible(false);
            validasi_tag.setVisible(false);
            validasi_thn_terbit.setVisible(false);
            validasi_kota_terbit.setVisible(false);
            validasi_isbn.setVisible(false);
            submitPenulis();
            submitPenerbit();
            submitRak();
            submitKota();
            submitDataBuku();
            if(update){
                updateTag();
            }
            else{
                submitTag();
            }
            int ok = JOptionPane.showConfirmDialog(this,"Data Berhasil Diinputkan !","",JOptionPane.DEFAULT_OPTION);
            if(ok == 0 && update == false){
                this.dispose();
                Daftar_buku daftar_buku = new Daftar_buku();
                daftar_buku.setVisible(true);
            }
            else if(ok == 0 && update == true){
                this.dispose();
                Daftar_buku_option daftar_buku_option = new Daftar_buku_option();
                daftar_buku_option.setVisible(true);
            }
        }
    }//GEN-LAST:event_btn_submitMouseClicked

    private void textbox_penulisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textbox_penulisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textbox_penulisActionPerformed

    private void textbox_judulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textbox_judulActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textbox_judulActionPerformed

    private void btn_addTag1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag1MouseClicked
        if(!isTagListOpen){
            Tag_list tag = new Tag_list(this,1);
            tag.setVisible(true);
            isTagListOpen = true;
        }
    }//GEN-LAST:event_btn_addTag1MouseClicked

    private void btn_addTag1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag1MouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_addTag1MouseEntered

    private void btn_addTag1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag1MouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btn_addTag1MouseExited

    private void btn_addTag2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag2MouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_addTag2MouseEntered

    private void btn_addTag2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag2MouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btn_addTag2MouseExited

    private void btn_addTag3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag3MouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_addTag3MouseEntered

    private void btn_addTag3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_addTag3MouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btn_addTag3MouseExited

    private void btn_submitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_submitMouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_submitMouseEntered

    private void btn_submitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_submitMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btn_submitMouseExited

    private void btn_backMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backMouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btn_backMouseEntered

    private void btn_backMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btn_backMouseExited

    private void textbox_edisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textbox_edisiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textbox_edisiActionPerformed

    private boolean textBoxValidation(javax.swing.JTextField textbox){
        String text = textbox.getText();
        if(text.equals("")){
            return false;
        }
        else return true;
    }
    private boolean yearValidation(){
        LocalDate localDate = LocalDate.now();
        int currentYear = localDate.getYear();
        int year = (int) spinner_thn_terbit.getValue();
        if(year > currentYear){
            return false;
        }
        else return true;
    }
    private boolean tagValidation(){
        if(((idTag1 != idTag2)&&(idTag1 != 0 && idTag2 != 0)) || 
           ((idTag1 != idTag3)&&(idTag1 != 0 && idTag3 != 0)) || 
           ((idTag2 != idTag3)&&(idTag2 != 0 && idTag3 != 0))){
            if((idTag1 != idTag2)&&(idTag1 == idTag3)||(idTag2 == idTag3)){
                return false;
            }
            else if((idTag1 != idTag3)&&(idTag1 == idTag2)){
                return false;
            }
            return true;
        }
        else if(idTag1 != 0 && (idTag2 == 0 && idTag3 == 0)){
            return true;
        }
        else if(idTag2 != 0 && (idTag1 == 0 && idTag3 == 0)){
            return true;
        }
        else if(idTag3 != 0 && (idTag1 == 0 && idTag2 == 0)){
            return true;
        }
        else{
            return false;
        } 
    }
    private boolean titleValidation(){
        String judul = textbox_judul.getText().toLowerCase();
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String sql = "SELECT id FROM tb_buku WHERE judul = ?;";
        int db_id_buku = 0;
        if(judul.equals("")){
            validasi_judul.setText("Judul tidak boleh kosong");
            return false;
        }
        else{
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1,judul);
                rs = ps.executeQuery();
                if(rs.next()){
                    db_id_buku = rs.getInt("id");
            }
            }
            catch (SQLException e) {
            }
            finally{
                if(rs != null){
                    try {
                        rs.close();
                    } catch (SQLException e) {
                    }
                }
                if(ps != null){
                    try {
                        ps.close();
                    } catch (SQLException e) {
                    }
                }
                if(conn != null){
                    try {
                        conn.close();
                    } catch (SQLException e) {
                    }
                }
            }
            if(db_id_buku != 0 && update == false){
                validasi_judul.setText("Judul buku sudah terdaftar");
                return false;
            }
            return true;
        } 
    }
    private void submitKota(){
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String kota = textbox_kota_terbit.getText().toLowerCase();
        int db_id_kota = 0;
        String sql = "SELECT id FROM tb_kota_terbit WHERE nama_kota = ?;";
        try {            
            ps = conn.prepareStatement(sql);
            ps.setString(1,kota);
            rs = ps.executeQuery();
            if(rs.next()){
                db_id_kota = rs.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Daftar_buku.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        conn = db_connection.getConnection();
        if(db_id_kota == 0){
            sql = "INSERT INTO tb_kota_terbit (nama_kota) VALUES (?);";
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1,kota);
                ps.executeUpdate();
            } 
            catch (SQLException e) {
            }
            finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        }
    }
    /*untuk fungsi submit penulis,penerbit atau nomor rak akan dilakukan pengecekan terlebih dahulu
      Kalau belum ada datanya akan ditambahkan dahulu ke tabelnya
      Kalau sudah ada langsung diselect idnya*/
    private void submitPenulis(){
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String penulis = textbox_penulis.getText().toLowerCase();
        int db_id_penulis = 0;
        String sql = "SELECT id FROM tb_penulis WHERE nama = ?;";
        try {            
            ps = conn.prepareStatement(sql);
            ps.setString(1,penulis);
            rs = ps.executeQuery();
            if(rs.next()){
                db_id_penulis = rs.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Daftar_buku.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        conn = db_connection.getConnection();
        if(db_id_penulis == 0){
            sql = "INSERT INTO tb_penulis (nama) VALUES (?);";
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1,penulis);
                ps.executeUpdate();
            } 
            catch (SQLException e) {
            }
            finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        }
    }
    private void submitRak(){
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        int no_rak = (int) Spinner_no_rak.getValue();
        int db_id_rak = 0;
        String sql = "SELECT id FROM tb_rak WHERE no_rak = ?;";
        try {            
            ps = conn.prepareStatement(sql);
            ps.setInt(1,no_rak);
            rs = ps.executeQuery();
            if(rs.next()){
                db_id_rak = rs.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Daftar_buku.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        conn = db_connection.getConnection();
        if(db_id_rak == 0){
            sql = "INSERT INTO tb_rak (no_rak) VALUES (?);";
            try {
                ps = conn.prepareStatement(sql);
                ps.setInt(1,no_rak);
                ps.executeUpdate();
            } 
            catch (SQLException e) {
            }
            finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        }
    }
    private void submitPenerbit(){
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String penerbit = textbox_penerbit.getText().toLowerCase();
        int db_id_penerbit = 0;
        String sql = "SELECT id FROM tb_penerbit WHERE nama = ?;";
        try {            
            ps = conn.prepareStatement(sql);
            ps.setString(1,penerbit);
            rs = ps.executeQuery();
            if(rs.next()){
                db_id_penerbit = rs.getInt("id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Daftar_buku.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        conn = db_connection.getConnection();
        if(db_id_penerbit == 0){
            sql = "INSERT INTO tb_penerbit (nama) VALUES (?);";
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1,penerbit);
                ps.executeUpdate();
            } 
            catch (SQLException e) {
            }
            finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        }
    }
    //proses submit data buku
    private void submitDataBuku(){
        String judul = textbox_judul.getText().toLowerCase();
        String penulis = textbox_penulis.getText().toLowerCase();
        String penerbit = textbox_penerbit.getText().toLowerCase();
        String kota = textbox_kota_terbit.getText().toLowerCase();
        String isbn = textbox_isbn.getText();
        String volume = textbox_volume.getText();
        String edisi = textbox_edisi.getText();
        int thn_terbit = (int) spinner_thn_terbit.getValue();
        int jumlah = (int) Spinner_jumlah.getValue();
        int no_rak = (int) Spinner_no_rak.getValue();
        int id_kota = 0;
        int id_penulis = 0;
        int id_penerbit = 0;
        int id_no_rak = 0;
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        //dilakukan select terlebih dahulu untuk mengisi variabel id_penulis,id_penerbit dan id_no_rak,id_kota_terbit
        String sql = "SELECT id FROM tb_kota_terbit WHERE nama_kota = ?;";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1,kota);
            rs = ps.executeQuery();
            if(rs.next()){
                id_kota = rs.getInt("id");
            }
        } catch (SQLException e) {
        }
        sql = "SELECT id FROM tb_penulis WHERE nama = ?;";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1,penulis);
            rs = ps.executeQuery();
            if(rs.next()){
                id_penulis = rs.getInt("id");
            }
        } catch (SQLException e) {
        }
        sql = "SELECT id FROM tb_penerbit WHERE nama = ?;";
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1,penerbit);
            rs = ps.executeQuery();
            if(rs.next()){
                id_penerbit = rs.getInt("id");
            }
        } catch (SQLException e) {
        }
        sql = "SELECT id FROM tb_rak WHERE no_rak = ?;";
        try {
            ps = conn.prepareStatement(sql);
            ps.setInt(1,no_rak);
            rs = ps.executeQuery();
            if(rs.next()){
                id_no_rak = rs.getInt("id");
            }
        } catch (SQLException e) {
        }
        //kalau tidak update data langsung diinsert ke tabel kalau dilakukan perubahan data maka akan menggunakan update
        if(!update){
            sql = "INSERT INTO tb_buku (judul,penulis_id,penerbit_id,tahun_terbit,jumlah,tgl_pendaftaran,rak_id,kota_terbit_id,isbn_issn,volume,edisi,tipe_buku_id) VALUES (?,?,?,?,?,CURDATE(),?,?,?,?,?,?);";
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1,judul);
                ps.setInt(2,id_penulis);
                ps.setInt(3,id_penerbit);
                ps.setInt(4,thn_terbit);
                ps.setInt(5,jumlah);
                ps.setInt(6,id_no_rak);
                ps.setInt(7,id_kota);
                ps.setString(8,isbn);
                if(volume.equals("")){
                    ps.setNull(9,Types.NULL);
                }
                else{
                    ps.setString(9,volume);
                }
                if(edisi.equals("")){
                    ps.setNull(10,Types.NULL);
                }
                else{
                    ps.setString(10,edisi);
                }
                ps.setInt(11,1);
                ps.executeUpdate();
            }
            catch (SQLException e) {
            }
            finally{
                if(rs != null){
                    try {
                        rs.close();
                    } catch (SQLException e) {
                    }
                }
                if(ps != null){
                    try {
                        ps.close();
                    } catch (SQLException e) {
                    }
                }
                if(conn != null){
                    try {
                        conn.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }
        else if(update){
            sql = "UPDATE tb_buku SET judul = ?,penulis_id = ?,penerbit_id = ?,tahun_terbit = ?,jumlah = ?,rak_id = ?,kota_terbit_id = ?,isbn_issn = ?,volume = ?,edisi = ? WHERE id = ?;";
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1,judul);
                ps.setInt(2,id_penulis);
                ps.setInt(3,id_penerbit);
                ps.setInt(4,thn_terbit);
                ps.setInt(5,jumlah);
                ps.setInt(6,id_no_rak);
                ps.setInt(7, id_kota);
                ps.setString(8,isbn);
                if(volume.equals("")){
                    ps.setNull(9,Types.NULL);
                }
                else{
                    ps.setString(9,volume);
                }
                if(edisi.equals("")){
                    ps.setNull(10,Types.NULL);
                }
                else{
                    ps.setString(10,edisi);
                }
                ps.setInt(11,id_buku);
                ps.executeUpdate();
            }
            catch (SQLException e) {
            }
            finally{
                if(rs != null){
                    try {
                        rs.close();
                    } catch (SQLException e) {
                    }
                }
                if(ps != null){
                    try {
                        ps.close();
                    } catch (SQLException e) {
                    }
                }
                if(conn != null){
                    try {
                        conn.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }
        
    }
    //untuk submit data tag ke tabel tb_tag_buku
    private void submitTag(){
        ArrayList<Integer> tag_id = new ArrayList<Integer>();
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String judul = textbox_judul.getText().toLowerCase();
        String sql = "SELECT id FROM tb_buku WHERE judul = ?;";
        if(idTag1 != 0){
            tag_id.add(idTag1);
        }
        if(idTag2 != 0){
            tag_id.add(idTag2);
        }
        if(idTag3 != 0){
            tag_id.add(idTag3);
        }
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1,judul);
            rs = ps.executeQuery();
            if(rs.next()){
                id_buku = rs.getInt("id");
            }
        } catch (Exception e) {
        }
        sql = "INSERT INTO tb_tag_buku (buku_id,tag_id) VALUES (?,?);";
        try {
            //dilakukan perulangan for each untuk memasukan semua data tag yang ada di array list ke database
            for(int id_tag : tag_id){
                ps = conn.prepareStatement(sql);
                ps.setInt(1,id_buku);
                ps.setInt(2,id_tag);
                ps.executeUpdate();
            }
        } catch (Exception e) {
        }
        finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
        
    }
    /*fungsi untuk mengisi semua isian kalau ada perubahan data buku
    jadi data buku sudah langsung dapat terlihat dan tinggal diganti*/
    public void prepareUpdate(String judul){
        int iteration = 0;//menentukan sudah iterasi ke berapa untuk tag (karena jumlah max tag 3 max iterasi adalah 3 kali (bernilai max 2)
        update = true;
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String sql = "SELECT tb_buku.id,tb_buku.judul,tb_penulis.nama,tb_penerbit.nama,tb_buku.tahun_terbit,tb_buku.jumlah,tb_rak.no_rak,tb_kota_terbit.nama_kota,tb_buku.isbn_issn,tb_buku.volume,tb_buku.edisi FROM tb_buku INNER JOIN tb_penulis ON tb_buku.penulis_id = tb_penulis.id INNER JOIN tb_penerbit ON tb_buku.penerbit_id = tb_penerbit.id INNER JOIN tb_rak ON tb_buku.rak_id = tb_rak.id INNER JOIN tb_kota_terbit ON tb_buku.kota_terbit_id = tb_kota_terbit.id WHERE tb_buku.judul = ?;";
        try {            
            ps = conn.prepareStatement(sql);
            ps.setString(1,judul);
            rs = ps.executeQuery();
            if(rs.next()){
                id_buku = rs.getInt(1);
                textbox_judul.setText(rs.getString(2));
                textbox_penulis.setText(rs.getString(3));
                textbox_penerbit.setText(rs.getString(4));
                spinner_thn_terbit.setValue(rs.getInt(5));
                Spinner_jumlah.setValue(rs.getInt(6));
                Spinner_no_rak.setValue(rs.getInt(7));
                textbox_kota_terbit.setText(rs.getString(8));
                textbox_isbn.setText(rs.getString(9));
                textbox_volume.setText(rs.getString(10));
                textbox_edisi.setText(rs.getString(11));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Daftar_buku.class.getName()).log(Level.SEVERE, null, ex);
        }
        //untuk mengisi data tag di form
        try {
            sql = "SELECT tb_tag.id,tb_tag.tag FROM tb_tag_buku INNER JOIN tb_buku ON tb_tag_buku.buku_id = tb_buku.id INNER JOIN tb_tag ON tb_tag_buku.tag_id = tb_tag.id WHERE tb_tag_buku.buku_id = ?;";
            ps = conn.prepareStatement(sql);
            ps.setInt(1,id_buku);
            rs = ps.executeQuery();
            while(rs.next()){
                if(iteration == 0){
                    idTag1 = rs.getInt(1);
                    textbox_tag1.setText(rs.getString(2));
                }
                else if(iteration == 1){
                    idTag2 = rs.getInt(1);
                    textbox_tag2.setText(rs.getString(2));
                }
                else if(iteration == 2){
                    idTag3 = rs.getInt(1);
                    textbox_tag3.setText(rs.getString(2));
                }
                iteration++;
            }
        } catch (SQLException e) {
        }
        finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    //fungsi untuk melakukan perubahan data tag.Data tag yang lama dihapus dan diganti dengan data baru
    private void updateTag(){
        ArrayList<Integer> tag_id = new ArrayList<Integer>();
        Connection conn = db_connection.getConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String sql = "DELETE FROM tb_tag_buku WHERE buku_id = ?;";
        if(idTag1 != 0){
            tag_id.add(idTag1);
        }
        if(idTag2 != 0){
            tag_id.add(idTag2);
        }
        if(idTag3 != 0){
            tag_id.add(idTag3);
        }
        try {
            ps = conn.prepareStatement(sql);
            ps.setInt(1,id_buku);
            ps.execute();
        } catch (Exception e) {
        }
        sql = "INSERT INTO tb_tag_buku (buku_id,tag_id) VALUES (?,?);";
        try {
            for(int id_tag : tag_id){
                ps = conn.prepareStatement(sql);
                ps.setInt(1,id_buku);
                ps.setInt(2,id_tag);
                ps.executeUpdate();
            }
        } catch (Exception e) {
        }
        finally{
            if(rs != null){
                try {
                    rs.close();
                } catch (SQLException e) {
                }
            }
            if(ps != null){
                try {
                    ps.close();
                } catch (SQLException e) {
                }
            }
            if(conn != null){
                try {
                    conn.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Daftar_buku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Daftar_buku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Daftar_buku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Daftar_buku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Daftar_buku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner Spinner_jumlah;
    private javax.swing.JSpinner Spinner_no_rak;
    private javax.swing.JLabel btn_addTag1;
    private javax.swing.JLabel btn_addTag2;
    private javax.swing.JLabel btn_addTag3;
    private javax.swing.JLabel btn_back;
    private javax.swing.JLabel btn_submit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinner_thn_terbit;
    private javax.swing.JTextField textbox_edisi;
    private javax.swing.JTextField textbox_isbn;
    private javax.swing.JTextField textbox_judul;
    private javax.swing.JTextField textbox_kota_terbit;
    private javax.swing.JTextField textbox_penerbit;
    private javax.swing.JTextField textbox_penulis;
    public javax.swing.JTextField textbox_tag1;
    public javax.swing.JTextField textbox_tag2;
    public javax.swing.JTextField textbox_tag3;
    private javax.swing.JTextField textbox_volume;
    private javax.swing.JLabel validasi_isbn;
    private javax.swing.JLabel validasi_judul;
    private javax.swing.JLabel validasi_kota_terbit;
    private javax.swing.JLabel validasi_no_rak;
    private javax.swing.JLabel validasi_penerbit;
    private javax.swing.JLabel validasi_penulis;
    private javax.swing.JLabel validasi_tag;
    private javax.swing.JLabel validasi_thn_terbit;
    // End of variables declaration//GEN-END:variables
}
